# -*- coding: utf-8 -*-
"""
/***************************************************************************
 Node2Link
                                 A QGIS plugin
 Drawing lines with points 
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2020-09-02
        git sha              : $Format:%H$
        copyright            : (C) 2020 by wemap
        email                : wemap
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
from qgis.PyQt.QtCore import QSettings, QTranslator, QCoreApplication, Qt, QVariant
from qgis.PyQt.QtGui import QIcon
from qgis.PyQt.QtWidgets import QMessageBox, QActionGroup, QAction, QInputDialog, QLineEdit
# Initialize Qt resources from file resources.py
from .resources import *

from qgis.core import edit, QgsMarkerSymbol, QgsProject, QgsGeometry, QgsPoint, QgsFeature
from qgis.utils import iface
from qgis.gui import QtCore
# Import the code for the DockWidget
from .node_to_link_dockwidget import Node2LinkDockWidget
import os.path


class Node2Link:
    """QGIS Plugin Implementation."""

    def __init__(self, iface):
        """Constructor.

        :param iface: An interface instance that will be passed to this class
            which provides the hook by which you can manipulate the QGIS
            application at run time.
        :type iface: QgsInterface
        """
        # Save reference to the QGIS interface
        self.iface = iface

        # initialize plugin directory
        self.plugin_dir = os.path.dirname(__file__)

        # initialize locale
        locale = QSettings().value('locale/userLocale')[0:2]
        locale_path = os.path.join(
            self.plugin_dir,
            'i18n',
            'Node2Link_{}.qm'.format(locale))

        if os.path.exists(locale_path):
            self.translator = QTranslator()
            self.translator.load(locale_path)
            QCoreApplication.installTranslator(self.translator)

        # Declare instance attributes
        self.actions = []
        self.menu = self.tr(u'&Node to Link')
        # TODO: We are going to let the user set this up in a future iteration
        self.toolbar = self.iface.addToolBar(u'Node2Link')
        self.toolbar.setObjectName(u'Node2Link')

        #print "** INITIALIZING Node2Link"

        self.pluginIsActive = False
        self.dockwidget = None


    def initGui(self):
        """Create the menu entries and toolbar icons inside the QGIS GUI."""

        # icon_path = ':/plugins/node_to_link/icon.png'
        icon_add = ':/plugins/node_to_link/icon_add.png'
        icon_delete = ':/plugins/node_to_link/icon_delete.png'
        icon_heading = ':/plugins/node_to_link/icon_heading.png'
        icon_move = ':/plugins/node_to_link/icon_move.png'
        icon_check = ':/plugins/node_to_link/icon_check.png'

        # link 입력 button
        self.add_link_action = self.add_action(
            icon_add,
            text=self.tr(u'Add link'),
            callback=self.run_add_action,
            checkable=True,  # 추가
            enabled_flag=True,  # 추가
            parent=self.iface.mainWindow())
        # state 추가 -> add_action 함수의 checkable 사용하는 것으로 수정
        # self.start_action.setCheckable(True)

        # link 삭제 button
        self.delete_link_action = self.add_action(
            icon_delete,
            text=self.tr(u'Delete link'),
            callback=self.run_delete_action,
            checkable=True,
            enabled_flag=True,
            parent=self.iface.mainWindow())

        # 노드정위치 button
        self.move_node_action = self.add_action(
            icon_move,
            text=self.tr(u'Move node and link'),
            callback=self.run_move_action,
            checkable=True,
            enabled_flag=True,
            parent=self.iface.mainWindow())

        # heading 입력 button
        self.change_heading_action = self.add_action(
            icon_heading,
            text=self.tr(u'Change heading of node'),
            callback=self.run_heading_action,
            checkable=True,
            enabled_flag=True,
            parent=self.iface.mainWindow())

        # link 작업 상태 변경 button
        self.change_status_action = self.add_action(
            icon_check,
            text=self.tr(u'Change link status'),
            callback=self.run_status_action,
            checkable=True,
            enabled_flag=True,
            parent=self.iface.mainWindow())

        # 현재 action
        self.currTool = None


    # noinspection PyMethodMayBeStatic
    def tr(self, message):
        """Get the translation for a string using Qt translation API.

        We implement this ourselves since we do not inherit QObject.

        :param message: String for translation.
        :type message: str, QString

        :returns: Translated version of message.
        :rtype: QString
        """
        # noinspection PyTypeChecker,PyArgumentList,PyCallByClass
        return QCoreApplication.translate('Node2Link', message)

    def add_action(
        self,
        icon_path,
        text,
        callback,
        checkable=False,                # 추가함
        enabled_flag=True,
        add_to_menu=True,
        add_to_toolbar=True,
        status_tip=None,
        whats_this=None,
        parent=None):
        """Add a toolbar icon to the toolbar.

        :param icon_path: Path to the icon for this action. Can be a resource
            path (e.g. ':/plugins/foo/bar.png') or a normal file system path.
        :type icon_path: str

        :param text: Text that should be shown in menu items for this action.
        :type text: str

        :param callback: Function to be called when the action is triggered.
        :type callback: function

        :param enabled_flag: A flag indicating if the action should be enabled
            by default. Defaults to True.
        :type enabled_flag: bool

        :param add_to_menu: Flag indicating whether the action should also
            be added to the menu. Defaults to True.
        :type add_to_menu: bool

        :param add_to_toolbar: Flag indicating whether the action should also
            be added to the toolbar. Defaults to True.
        :type add_to_toolbar: bool

        :param status_tip: Optional text to show in a popup when mouse pointer
            hovers over the action.
        :type status_tip: str

        :param parent: Parent widget for the new action. Defaults None.
        :type parent: QWidget

        :param whats_this: Optional text to show in the status bar when the
            mouse pointer hovers over the action.

        :returns: The action that was created. Note that the action is also
            added to self.actions list.
        :rtype: QAction
        """

        icon = QIcon(icon_path)
        action = QAction(icon, text, parent)
        action.triggered.connect(callback)
        action.setEnabled(enabled_flag)
        action.setCheckable(checkable)          # 추가함.

        if status_tip is not None:
            action.setStatusTip(status_tip)

        if whats_this is not None:
            action.setWhatsThis(whats_this)

        if add_to_toolbar:
            self.toolbar.addAction(action)

        if add_to_menu:
            self.iface.addPluginToMenu(
                self.menu,
                action)

        self.actions.append(action)

        return action

    #--------------------------------------------------------------------------

    def onClosePlugin(self):
        """Cleanup necessary items here when plugin dockwidget is closed"""

        #print "** CLOSING Node2Link"

        # disconnects
        self.dockwidget.closingPlugin.disconnect(self.onClosePlugin)

        # remove this statement if dockwidget is to remain
        # for reuse if plugin is reopened
        # Commented next statement since it causes QGIS crashe
        # when closing the docked window:
        # self.dockwidget = None
        # self.dockwidget = None

        self.pluginIsActive = False


    def unload(self):
        """Removes the plugin menu item and icon from QGIS GUI."""

        #print "** UNLOAD Node2Link"

        for action in self.actions:
            self.iface.removePluginMenu(
                self.tr(u'&Node to Link'),
                action)
            self.iface.removeToolBarIcon(action)
        # remove the toolbar
        del self.toolbar

    #--------------------------------------------------------------------------


    ## layer 선택 함수, qgis의 layer와, 플러그인의 로딩 시점 차이 때문에 layer 선택 확인 필요
    def layer_selector(self):
        self.node_layer = QgsProject.instance().mapLayer('alley_node_92ba605d_66c9_4da0_9045_8f9a086e5145')  # DB 레이어
        self.link_layer = QgsProject.instance().mapLayer('alley_link_459975fb_9adf_420d_b135_77c1577269f9')  # DB 레이어
        # self.node_layer = QgsProject.instance().mapLayer('alley_node_7ba9c802_33d6_4a6a_9ddc_856bd360da0c')      # local test용 레이어
        # self.link_layer = QgsProject.instance().mapLayer('alley_link_c4d7f0f1_86cf_46c3_875b_848deea58e73')      # local test용 레이어
        if self.node_layer == None:
            QMessageBox.information(self.iface.mainWindow(), "레이어 설정", "노드 레이어 설정실패")
            # ToDo! self kill ???
        if self.link_layer == None:
            QMessageBox.information(self.iface.mainWindow(), "레이어 설정", "링크 레이어 설정실패")
            # ToDo! self kill ???


    ## 하나의 action 버튼만 활성화하기위한 action change 함수
    def changeTool(self, nextTool):
        # print("before currTool: ", self.currTool)    # test
        # 이전 tool버튼을 직접 다시 클릭해서 종료한 경우 제외하기 위해 isChecked() == True인지 확인한다.
        if self.currTool != None and self.currTool != nextTool and self.currTool.isChecked() == True:
            self.currTool.trigger()                 # 이전 작업 종료
        # 바뀐 action을 현재 action으로 지정해준다.
        self.currTool = nextTool
        # print("after currTool: ", self.currTool)    # test

    
    ## link 입력 button의 run 함수
    def run_add_action(self):
        # layer 설정
        self.layer_selector()  
        # assert문으로 layer가 설정되었는지 검증
        assert self.node_layer != None, "self.node_layer != None"

        # checked 상태 확인
        # print("self.add_link_action.isChecked()=", self.add_link_action.isChecked())

        # checked 상태이면 node레이어에 selectionChanged 이벤트를 connect
        if self.add_link_action.isChecked() == True:
            # 버튼 change
            self.changeTool(self.add_link_action)
            print("Link 추가 작업이 시작되었습니다.")

            # 기존에 선택됐던 피쳐 선택 취소하기 위해 deselect action trigger
            self.deselectAll()
            # selection 버튼 call
            iface.actionSelect().trigger()
            # node_layer 활성화
            iface.setActiveLayer(self.node_layer)
            # selectionChanged 이벤트함수 연결
            self.node_layer.selectionChanged.connect(self.onNodeSelected)
        # checked 아니면 disconnect
        else:
            self.node_layer.selectionChanged.disconnect(self.onNodeSelected)
            print("Link 추가 작업이 종료되었습니다.")


    ## node의 selection change 이벤트가 발생했을 때, 처리 할 메서드
    def onNodeSelected(self, selected, deselected, clearAndSelect):
        # selected, deselected 는 array type
        # print("selected : ", selected)
        # print("deselected : ", deselected)

        # 선택된 2개의 node들을 nodefr, nodeto에 지정한다.
        # nodefr, nodeto 선언
        nodefr, nodeto = None, None

        # 현재 선택된 node가 있을 경우
        if len(selected) > 0:
            # 이전에 선택된 node가 있을 경우
            if len(deselected) > 0:
                # array type이기 때문에 [0]으로 배열의 첫 번째 요소 선택해서 from, to 노드로 지정
                nodefr, nodeto = deselected[0], selected[0]
            # 이전에 선택된 node가 없을 경우, 현재 node가 from 노드가 됨
            else:
                nodefr, nodeto = selected[0], None

        # from, to 노드가 모두 존재할 경우 link 생성
        if nodefr != None and nodeto != None:
            # print("nodeFr : ", nodefr, "nodeTo : ", nodeto)

            # node_fr, node_to 중복검사하기
            # True 체크해서 return 으로 함수 아래문장 종료
            if self.checkLinkDups(nodefr, nodeto):
                return print("Link가 중복됩니다. 새로운 Link를 생성할 수 없습니다.")

            # link 생성 함수
            self.createLink(nodefr, nodeto)


    ## 선택된 2개의 node로 link 생성
    def createLink(self, from_node, to_node):
        # https://github.com/peterahlstrom/PointConnector/blob/master/point_connector.py
        # https://anitagraser.com/pyqgis-101-introduction-to-qgis-python-programming-for-non-programmers/pyqgis101-creating-editing-a-new-vector-layer/

        # feature 추가
        # select된 피쳐 id를 사용해 feature로 넘겨주기 위해 node layer 불러옴 -> self.layer 사용하는 걸로 수정함.
        # node_layer = QgsProject.instance().mapLayer('alley_node_7ba9c802_33d6_4a6a_9ddc_856bd360da0c')

        # from, to 노드 id로 feature 선택
        frPoint, toPoint = self.node_layer.getFeature(from_node), self.node_layer.getFeature(to_node)
        frGeom, toGeom = frPoint.geometry(), toPoint.geometry()
        # print("attributes : ", frPoint.attributes())        # test
        # attrs = [0, from_node, to_node]                     # test [link_id, fr_id, to_id], link_id auto increment 설정?
        new_line = QgsGeometry.fromPolyline([QgsPoint(frGeom.asPoint()), QgsPoint(toGeom.asPoint())])
        # print("attr: ", attrs, "newline: ", new_line)       # test

        feat = QgsFeature(self.link_layer.fields())
        feat.setGeometry(new_line)
        # feat.setAttributes(attrs)
        # https://docs.qgis.org/3.10/en/docs/pyqgis_developer_cookbook/vector.html
        # Or set a single attribute by key or by index:
        # link_id는 auto_increment이므로 from_node, to_node id만 지정해준다.
        feat.setAttribute(1, from_node)
        feat.setAttribute(2, to_node)
        # status : check complete 상태로 추가
        feat.setAttribute(3, 1)

        try:
            with edit(self.link_layer):
                self.link_layer.addFeatures([feat])
                print("Link가 생성되었습니다! from node: ", from_node, "to node: ", to_node)
        except Exception as err:
            print(repr(err))


    ## 링크의 노드 중복 검사 함수
    def checkLinkDups(self, from_node, to_node):
        # 똑같은 link 거나, fr&to 순서만 다를 경우 True반환
        for feat in self.link_layer.getFeatures():
            if from_node == feat["node_fr"] and to_node == feat["node_to"]:
                return True
            if to_node == feat["node_fr"] and from_node == feat["node_to"]:
                return True


    ## link 삭제 버튼 run 함수
    def run_delete_action(self):
        self.layer_selector()
        assert self.link_layer != None, "self.link_layer != None"

        if self.delete_link_action.isChecked() == True:
            self.changeTool(self.delete_link_action)
            print("link 삭제 작업이 시작되었습니다.")

            # deselect all
            self.deselectAll()

            # selection 버튼 call
            iface.actionSelect().trigger()
            #link_layer 활성화
            iface.setActiveLayer(self.link_layer)
        
            # # delete a feature with specified ID
            # layer.deleteFeature(fid)

            # selection 이벤트 함수 연결
            self.link_layer.selectionChanged.connect(self.deleteLink)

        else:
            self.link_layer.selectionChanged.disconnect(self.deleteLink)
            print("link 삭제 작업이 종료되었습니다.")


    ## 링크 삭제 함수
    def deleteLink(self, selected):
        # self.link_layer.deleteFeature(selected)   # 개별 id로 받아올 때
        # selected : list 형태로 받아옴
        # self.link_layer.dataProvider().deleteFeatures(selected)       # dataProvider 사용하면 undo,redo 사용 X

        # with edit(layer) 구문 사용, commit 자동으로 됨.
        # https://www.opengis.ch/2015/08/12/with-edit-layer/
        try:
            with edit(self.link_layer):
                self.link_layer.deleteFeatures(selected)
                print(" 선택된 link가 삭제되었습니다. Link_id: ", selected)
        except Exception as err:
            print(repr(err))


    ## 노드정위치 버튼 run 함수
    def run_move_action(self):
        self.layer_selector()
        assert self.node_layer != None, "self.node_layer != None"
        assert self.link_layer != None, "self.link_layer != None"

        if self.move_node_action.isChecked() == True:
            self.changeTool(self.move_node_action)
            print("node정위치 작업이 시작되었습니다.")

            self.deselectAll()
            ## node_layer 활성화
            iface.setActiveLayer(self.node_layer)

            ## edit mode 시작
            self.node_layer.startEditing()

            # move feature 버튼 call
            # https://gis.stackexchange.com/questions/141371/implementing-add-feature-action-using-pyqgis?rq=1
            iface.actionMoveFeature().trigger()

            ## node 레이어에 feature geometry changed 이벤트 함수 연결
            # node 이동 시, link 자동 수정
            self.node_layer.geometryChanged.connect(self.updateLink)

        else:
            # checked 아니면 이벤트함수 disconnect
            self.node_layer.geometryChanged.disconnect(self.updateLink)

            # commit
            self.node_layer.commitChanges()
            ## edit 종료
            iface.vectorLayerTools().stopEditing(self.node_layer)
            print("node정위치 작업이 종료되었습니다.")


    ## link 동기화 함수
    def updateLink(self, fid, new_geom):
        # print("fid: ", fid, "geom: ", new_geom, "노드가 변경되었습니다.")

        ## link_layer 수정, node 따라서 geometry만 수정

        # changeGeometry 함수가 적용되기 위해 레이어의 edit 모드가 활성화 되어야 한다.
        iface.setActiveLayer(self.link_layer)
        # self.link_layer.startEditing()

        # link_layer의 모든 feature 확인
        for feat in self.link_layer.getFeatures():
            # 이동한 node와 같은 id의 fr, to 노드를 가진 link 찾기

            # from 노드가 수정된 경우
            if fid == feat["node_fr"] :
                link_id = feat["link_id"]
                # to 노드는 기존에 있는 값 그대로 사용
                toPoint = self.node_layer.getFeature(feat["node_to"])
                # frGeom, toGeom = new_geom, feat.geometry().get()[-1]              # feature의 geometry에 바로 접근하는 방법
                frGeom, toGeom = new_geom, toPoint.geometry()
                new_link_geom = QgsGeometry.fromPolyline([QgsPoint(frGeom.asPoint()), QgsPoint(toGeom.asPoint())])

                # link geometry 수정
                try:
                    with edit(self.link_layer):
                        ok = self.link_layer.changeGeometry(link_id, new_link_geom)
                        # feat.setGeometry(new_link_geom)
                        # 결과 출력
                        print("Changed?: ", ok, "link id: ", link_id)
                except Exception as err:
                    print(repr(err))

            # to 노드가 수정된 경우
            if fid == feat["node_to"]:
                link_id = feat["link_id"]
                frPoint = self.node_layer.getFeature(feat["node_fr"])
                frGeom, toGeom = frPoint.geometry(), new_geom
                new_link_geom = QgsGeometry.fromPolyline([QgsPoint(frGeom.asPoint()), QgsPoint(toGeom.asPoint())])

                try:
                    with edit(self.link_layer):
                        ok = self.link_layer.changeGeometry(link_id, new_link_geom)
                        print("Changed?: ", ok, "link id: ", link_id)
                except Exception as err:
                    print(repr(err))

        ## node수정작업 연속으로 하기위해 다시 node_layer 활성화
        iface.setActiveLayer(self.node_layer)
        iface.actionMoveFeature().trigger()


    ## heading 입력 버튼 run 함수
    def run_heading_action(self):
        self.layer_selector()
        assert self.node_layer != None, "self.node_layer != None"

        if self.change_heading_action.isChecked() == True:
            self.changeTool(self.change_heading_action)
            print("heading 입력 작업이 시작되었습니다.")
            self.deselectAll()
            iface.actionSelect().trigger()
            iface.setActiveLayer(self.node_layer)

            # selection 이벤트에 함수 연결
            self.node_layer.selectionChanged.connect(self.changeHeading)

        else:
            # checked 아니면 disconnect
            self.node_layer.selectionChanged.disconnect(self.changeHeading)
            print("heading 입력 작업이 종료되었습니다.")


    ## heading 입력 함수
    def changeHeading(self, selected):
        if len(selected) > 0:
            ## Dialog 상자 띄워서 angle값 입력 받기
            # http://www.green-forums.info/greenlib/geolibrary/Lawhead%20J/QGIS%20Python%20Programming%20Cookbook.%2020%20%2852%29/QGIS%20Python%20Programming%20Cookboo%20-%20Lawhead%20J.pdf
            # initialize the dialog
            # qid = QInputDialog()
            # configure the dialog
            new_heading, ok = QInputDialog.getInt(self.iface.mainWindow(), "Change heading", "Enter heading value", 0, 0, 360, 1)
            # dialog 창 뜨면, text 입력하고, ok 버튼 누른다.
            # 입력 결과 출력
            print("입력된 heading 값: ", new_heading)

            ## heading 값 업데이트
            # update an attribute with given field index (int) to a given value
            fid = selected[0]
            fieldIndex = 2
            value = new_heading
            try:
                with edit(self.node_layer):
                    self.node_layer.changeAttributeValue(fid, fieldIndex, value)
                    # 수정 결과 출력
                    print("heading 값이 수정됐습니다! fid: ", fid, "value: ", value)
            except Exception as err:
                print(repr(err))


    ## link 작업 상태 변경 run 함수
    def run_status_action(self):
        self.layer_selector()
        assert self.link_layer != None, "self.link_layer != None"

        if self.change_status_action.isChecked() == True:
            self.changeTool(self.change_status_action)
            print("link 작업상태 변경이 시작되었습니다.")
            self.deselectAll()
            iface.actionSelect().trigger()
            iface.setActiveLayer(self.link_layer)

            # selection 이벤트 함수 연결
            self.link_layer.selectionChanged.connect(self.changeStatus)

        else:
            # checked 아니면 disconnect
            self.link_layer.selectionChanged.disconnect(self.changeStatus)
            print("link 작업상태 변경이 종료되었습니다.")


    ## link 상태변경 함수
    def changeStatus(self, selected):
        # 필드 이름으로 필드 인덱스 구하는 법
        # layer.fields().indexFromName('status')

        # https://docs.qgis.org/3.10/en/docs/pyqgis_developer_cookbook/vector.html#modifying-vector-layers
        ## update an attribute with given field index (int) to a given value
        # fieldIndex =1
        # value ='My new name'
        # layer.changeAttributeValue(fid, fieldIndex, value)

        # status 필드의 필드 인덱스 : 3
        fieldIndex = 3
        for i in selected:
            try:
                with edit(self.link_layer):
            # 선택된 피쳐의 status가 0(auto입력)이면 1(check complete)로 수정한다.
                    if self.link_layer.getFeature(i)[3] == 0:
                        self.link_layer.changeAttributeValue(i, fieldIndex, 1)
                        print("link id: ", i, ", status: ", self.link_layer.getFeature(i)[3])
            except KeyError:
                pass
            except Exception as err:
                print(repr(err))


    ## 기존에 선택됐던 피쳐 선택 취소하기 위한 deselect action trigger 함수
    # https://gis.stackexchange.com/questions/155709/where-is-the-qgis-api-action-for-deselect
    def deselectAll(self):
        for a in iface.attributesToolBar().actions():
            if a.objectName() == 'mActionDeselectAll':
                a.trigger()
                break


    ## Original Run method
    """
    def run(self):
        "Run method that loads and starts the plugin"

        if not self.pluginIsActive:
            self.pluginIsActive = True

            print("** STARTING Node2Link")

            # dockwidget may not exist if:
            #    first run of plugin
            #    removed on close (see self.onClosePlugin method)
            if self.dockwidget == None:
                # Create the dockwidget (after translation) and keep reference
                self.dockwidget = Node2LinkDockWidget()

            # connect to provide cleanup on closing of dockwidget
            self.dockwidget.closingPlugin.connect(self.onClosePlugin)

            # show the dockwidget
            # TODO: fix to allow choice of dock location
            self.iface.addDockWidget(Qt.TopDockWidgetArea, self.dockwidget)
            self.dockwidget.show()

            ## # dock위젯 사용할 경우, 버튼에 함수 binding
            ## self.dockwidget.modify.clicked.connect(self.test)
            ## self.dockwidget.sync.clicked.connect(self.test)
    """

    ## 파이썬 콘솔창에서 layer id 구하는 방법
    """
    layers = QgsProject.instance().mapLayersByName('alley_node')
    layers[0].id()
    'alley_node_0cec2e3f_5398_4336_8273_93e30c501d55'
    """

    # commit
    # self.link_layer.commitChanges()
    # iface.vectorLayerTools().stopEditing(self.link_layer)

    # change geometry
    # # set new geometry (QgsGeometry instance) for a feature
    # geometry = QgsGeometry.fromPolyline([QgsPoint(frGeom.asPoint()), QgsPoint(toGeom.asPoint())])
    # layer.changeGeometry(fid, geometry)